/*
 * FILE: nasa_shell.c
 * 
 * PURPOSE:
 *   Implements a simple shell with basic built-in commands, 
 *   process execution, signal handling, and I/O redirection.
 *
 * AUTHOR: [Your Name]
 * DATE: [Date]
 * VERSION: 1.0
 */

#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700

#include <fcntl.h>
#include <stdbool.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <assert.h>

#define MAX_CHAR 2048
#define MAX_PROCESSES 1000
#define MAX_ARGS 512

/* Structure to encapsulate global state */
typedef struct {
    bool foreground_mode;
    bool background_mode;
    int exit_status;
    int process_count;
    int process_list[MAX_PROCESSES];
    char input_file[MAX_CHAR];
    char output_file[MAX_CHAR];
} ShellContext;

/* Function Prototypes */
void InitSignals(void);
void HandleSigInt(int signo);
void HandleSigTstp(int signo);
void RunShellLoop(shell_state_t *state);
char* GetInputLine(void);
char** ParseCommandLine(char *line);
int ExecuteCommand(shell_state_t *state, char **args);
int BuiltinCd(char **args);

int main(void) {
    static shell_state_t state = {false, false, 0, 0, {0}, "", ""};
    
    initialize_signals();
    shell_loop(&state);
    return EXIT_SUCCESS;
}

void initialize_signals(void) {
    struct sigaction SIGINT_action = {0}, SIGTSTP_action = {0};

    SIGINT_action.sa_handler = handle_SIGINT;
    sigfillset(&SIGINT_action.sa_mask);
    SIGINT_action.sa_flags = 0;
    sigaction(SIGINT, &SIGINT_action, NULL);

    SIGTSTP_action.sa_handler = handle_SIGTSTP;
    sigfillset(&SIGTSTP_action.sa_mask);
    SIGTSTP_action.sa_flags = 0;
    sigaction(SIGTSTP, &SIGTSTP_action, NULL);
}

void handle_SIGINT(int signo) {
    (void)signo;
    return;
}

void handle_SIGTSTP(int signo) {
    (void)signo;
    static bool foreground_only = false;
    foreground_only = !foreground_only;
    const char *message = foreground_only ? "Entering foreground-only mode (& is ignored)\n" : "Exiting foreground-only mode\n";
    write(STDOUT_FILENO, message, strlen(message));
}

void shell_loop(shell_state_t *state) {
    char line[MAX_CHAR];
    char *args[MAX_ARGS];
    int status;

    do {
        printf(": ");
        fflush(stdout);
        
        if (fgets(line, MAX_CHAR, stdin) == NULL) {
            continue;
        }
        line[strcspn(line, "\n")] = '\0';
        
        assert(strlen(line) < MAX_CHAR); /* Ensuring line length does not exceed buffer */
        status = execute_command(state, args);
    } while (status);
}

int execute_command(shell_state_t *state, char **args) {
    assert(args != NULL); /* Ensuring args is not null */
    if (!args[0]) return 1;
    if (strcmp(args[0], "cd") == 0) return builtin_cd(args);
    if (strcmp(args[0], "exit") == 0) exit(0);

    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        return 1;
    }
    if (pid == 0) {
        execvp(args[0], args);
        perror("execvp");
        exit(EXIT_FAILURE);
    } else {
        waitpid(pid, &state->exit_status, 0);
    }
    return 1;
}

int builtin_cd(char **args) {
    assert(args != NULL); /* Ensuring args is not null */
    if (!args[1]) {
        chdir(getenv("HOME"));
    } else {
        if (chdir(args[1]) != 0) {
            perror("cd");
        }
    }
    return 1;
}
